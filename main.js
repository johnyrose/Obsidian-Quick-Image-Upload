/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var c=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var h=Object.prototype.hasOwnProperty;var g=(a,e)=>{for(var t in e)c(a,t,{get:e[t],enumerable:!0})},y=(a,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of u(e))!h.call(a,o)&&o!==t&&c(a,o,{get:()=>e[o],enumerable:!(n=m(e,o))||n.enumerable});return a};var F=a=>y(c({},"__esModule",{value:!0}),a);var v={};g(v,{default:()=>r});module.exports=F(v);var i=require("obsidian"),l="my-image-icon",I=`<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
  <circle cx="8.5" cy="8.5" r="1.5"></circle>
  <polyline points="21 15 16 10 5 21"></polyline>
</svg>`,f="quick-image-upload-ribbon-icon",E="quick-image-upload",d="Quick Image Upload",w="image/*",r=class extends i.Plugin{async onload(){(0,i.addIcon)(l,I),this.addRibbonIcon(l,d,()=>{this.uploadImage()}).addClass(f),this.addCommand({id:E,name:d,callback:()=>this.uploadImage(),icon:l})}async uploadImage(){let e=this.createFileInputElement();document.body.appendChild(e),e.click(),document.body.removeChild(e)}createFileInputElement(){let e=document.createElement("input");return e.type="file",e.accept=w,e.style.display="none",e.addEventListener("change",()=>{var t;return this.handleFileSelection((t=e.files)==null?void 0:t[0])}),e}async handleFileSelection(e){if(e)try{let t=await e.arrayBuffer(),n=await this.saveFileToVault(e,t);await this.insertImageLink(n)}catch(t){console.error("Error uploading image:",t),new i.Notice("Failed to upload image.")}}async saveFileToVault(e,t){let n=this.getAttachmentFolder(),o=new Date().toISOString().replace(/[:.]/g,"-"),p=e.name.split(".").pop(),s=`${n}/${o}.${p}`;return this.app.vault.getAbstractFileByPath(n)||await this.app.vault.createFolder(n),await this.app.vault.createBinary(s,t),s}async insertImageLink(e){let t=this.app.workspace.getActiveViewOfType(i.MarkdownView);t?t.editor.replaceSelection(`![[${e}]]`):new i.Notice("No active editor to insert the image into.")}getAttachmentFolder(){let e=this.app.workspace.getActiveFile(),t=this.app.vault.getConfig("attachmentFolderPath");return t==="./"?e&&e.parent?e.parent.path:"/":t||"/"}};
